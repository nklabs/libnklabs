DATE=$(shell date -u -Iminute)
YEAR=$(shell expr $(shell echo $(DATE) | cut -b 1-4) + 0)
MONTH=$(shell expr $(shell echo $(DATE) | cut -b 6-7) + 0)
DAY=$(shell expr $(shell echo $(DATE) | cut -b 9-10) + 0)
HOUR=$(shell expr $(shell echo $(DATE) | cut -b 12-13) + 0)
MINUTE=$(shell expr $(shell echo $(DATE) | cut -b 15-16) + 0)
##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.13.0-B3] date: [Tue Jul 13 19:29:23 EDT 2021] 
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = nucleo_g071rb


######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Og -Os


#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

######################################
# source
######################################
# C sources
#../../src/database.c \


C_SOURCES =  \
../../src/database.c \
../../src/nkprintf_fp.c \
../../src/startup.c \
../../src/nkrtc.c \
../../src/nkdbase.c \
../../src/nkmcuflash.c \
../../src/nkspiflash.c \
../../src/nkcrclib.c \
../../src/nkscan.c \
../../src/nksched.c \
../../src/nkcli.c \
../../src/nkreadline.c \
../../src/nkuart_stm32.c \
../../src/nkarch_stm32.c \
../../src/nkymodem.c \
../../src/nkymodem_cmd.c \
../../src/nkprintf.c \
../../src/nkinfile.c \
../../src/nkoutfile.c \
../../src/nkdectab.c \
../../src/nkstring.c \
../../src/nkstrtod.c \
Core/Src/main.c \
Core/Src/stm32g0xx_it.c \
Core/Src/stm32g0xx_hal_msp.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_uart_ex.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_rcc.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_rcc_ex.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_ll_rcc.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_flash_ex.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_gpio.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_dma.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_dma_ex.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_ll_dma.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_pwr_ex.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_cortex.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_exti.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_rtc.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_rtc_ex.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_spi.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_spi_ex.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_tim.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_tim_ex.c \
Core/Src/system_stm32g0xx.c \
Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_iwdg.c

# ASM sources
ASM_SOURCES =  \
startup_stm32g071xx.s


#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m0plus

# fpu
# NONE for Cortex-M0/M0+/M3

# float-abi


# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  \
-DUSE_HAL_DRIVER \
-DSTM32G071xx


# AS includes
AS_INCLUDES = 

# C includes
C_INCLUDES =  \
-I../../config \
-I../../inc \
-ICore/Inc \
-IDrivers/STM32G0xx_HAL_Driver/Inc \
-IDrivers/STM32G0xx_HAL_Driver/Inc/Legacy \
-IDrivers/CMSIS/Device/ST/STM32G0xx/Include \
-IDrivers/CMSIS/Include


# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections
CFLAGS += -DVERSION_MAJOR=`cat ../../src/VERSION_MAJOR`  -DVERSION_MINOR=`cat ../../src/VERSION_MINOR` -DYEAR=$(YEAR) -DMONTH=$(MONTH) -DDAY=$(DAY) -DHOUR=$(HOUR) -DMINUTE=$(MINUTE)

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"


#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = STM32G071RBTx_FLASH.ld

# libraries
LIBS = -lc -lm -lnosys 
# -l:SFX_LIB_MON_CM0+_GCC.a -l:ST_MONARCH_LIB_CM0+_GCC.a -l:ST_RETRIEVER_LIB_CM0+_GCC.a
# -l:ADDON_RF_PROTOCOL_MON_CM0+_GCC.a

LIBDIR = -L../lib

#  -specs=nano.specs
LDFLAGS = $(MCU) -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin


#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile $(BUILD_DIR)/version.o
	$(CC) $(OBJECTS) $(BUILD_DIR)/version.o $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	
	
$(BUILD_DIR):
	mkdir $@		

# Rebuild version.o if anything changed
$(BUILD_DIR)/version.o: $(OBJECTS) ../../src/VERSION_MAJOR ../../src/VERSION_MINOR ../../src/version.c

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)

flash:
	/opt/STM32CubeProgrammer/bin/STM32_Programmer_CLI -c port=swd -e all -d build/${TARGET}.elf -v -rst
  
# Bump version numbers...

bump_minor:
	@expr `cat ../../../src/VERSION_MINOR` + 1 >../../../src/VERSION_MINOR
	@echo
	@echo New version V`cat ../../../src/VERSION_MAJOR`R`cat ../../../src/VERSION_MINOR`
	@echo

bump_major:
	@expr `cat ../../../src/VERSION_MAJOR` + 1 >../../../src/VERSION_MAJOR
	@echo 0 > ../../src/VERSION_MINOR
	@echo
	@echo New version V`cat ../../src/VERSION_MAJOR`R`cat ../../src/VERSION_MINOR`
	@echo
  
#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***
