- - - - -

  STM32:
    How do we handle STM32F746 flash memory? Sector sizes are not uniform..

    Missing flash size

  Atmel:
    i2c not working well on atsame70 (crash during i2c scan), but ok on others
    use bitbang for atsame70..

  missing documentation:
     target descriptions
     Demo CLI manual
     drivers: flash, rtc, i2c

- - - - -
nkymodem:
  ymodem send should send back the file we downloaded..
  make it event driven
  provide file access functions right in call to nk_yrecv?

nkchecked:
  better error return for nk_checked_read- maybe return ssize_t. [done]
    but this means nkinfile needs to expect ssize_t from block_read.

extrtc:
  set MCU clock from it?
  report if clock was lost.
  move rtc specific drive to app?

arduino:
  digitalRead, digitalWrite, pinMode
  attachInterrupt, detachInterrupt
  analogRead, analogReference,
  analogWrite

output freezes on ST- fixed by reboot linux

Atmel:

  low power modes?  which is the best clock to use?

mcuflash:

  nkmcuflash rd and wr do 32-bit works, but on stm32 min. size is 8 bytes- add read / modify / write?

bootloader:

  We should include an example standard bootloader to show off the ymodem/zmodem firmware udpate

Add more targets:

  Add RISCV
  Add Xilinx
  Add TI
  PIC32
  Some example in an RTOS

Add more peripherals:

  CAN, ADC, DAC, GPIO, etc.. all arduino GPIOs?

  fat filesystem + sdio?

event driven:

  multi-line gets for dbase

  nkymodem- pause cli input until communication is done

  maybe call sched recursively?

nkdbase:

  more generic way to deal with crc checking: the infile_t and outfile_t could be used for
  other things

  more tests..
  try all input number formats, including negatives..

  make sure skipping works..

  should error output be an argument instead of nkstderr?  Better for threads

  Finish schema compiler

Nkscan:

  iscan ignores case and squashes case on word and identifier.  Maybe word/identifier should be individually controllable?
  maybe case ignore should be changable in the format string?

  need tests for iscan

  Expression parser for nkscan?  Allow 0x before decimal?

  Some kind of options parser where we don't care about order- we can build this externally
    while tryopt1 || tryopt2 || tryopt3 || tryopt4

  Always allow whitespace before end of string?  Always allow whitespace before start of conversion?
  Do not ignore whitespace before doubles? (but strtod does this to match C-library standard).

  Versions of nkscan and friends which take a C-string, like sscanf?

  Also vs. sscanf:
    sscanf has character classes
    sscanf automatically skips whitespace before conversions (except for a few special cases)
    sscanf '*' modifier scans but doesn't save result

Get rid of global arrays:

  instead have a wrapper function with the array on the stack which calls the underlying function

Naming:

  nkinfile_t vs. nk_infile_t  type name
  nkdbase vs. nk_dbase        file name

nkinfile:

  How do we handle read errors for nkinfile operations?  Maybe use ssize_t
for block_read..

Notes:

  It seems like a nice idea to use non-standard format sequences in nk_printf-
  but we can not if we also want gcc's built-in format string checking to work.  Therefore we
  have other printing functions:

	nk_indent
	nk_byte_hex_dump
	nk_dbase_fprint

        nkprintf / nkscan:

          Print not just a C-string, but also from an nkinfile

          But this then means that print depends on nkinfile...
          Likewise: Save output to an nkoutfile, not just to a C-string

  sched bug:
            in some implementations, we only update current_time at
		timeouts, but time still passes...  This means if we
            schedule something in the futre we are using the wrong time to
            do it.  Ideally, current_time is based on the actual timer
            value.

            Even so, system works not too bad as it is: interrupts usually
            schedule things for now, and that works.  It's only when we
            schedule things for the future that it breaks.

            this comes up when we try to do a tickless implementation on low
	    power CPUs.  Also the zynq one is probably wrong..
